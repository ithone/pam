<?php
	// Entity class generated automatically by MDA process
	namespace MyCompany\MyProject\AppBundle\Entity;

	use Doctrine\ORM\Mapping as ORM;
	use JMS\SecurityExtraBundle\Annotation\Secure;
	use Symfony\Component\Validator\Constraints as Assert;
	use Symfony\Bridge\Doctrine\Validator\Constraints as DoctrineAssert;
	use Doctrine\Common\Collections\ArrayCollection;

	/**
 	* MyCompany\MyProject\AppBundle\Entity\FraudeRecord
 	*
 	* @ORM\Table(name="fraude_record")
 	* @ORM\Entity(repositoryClass="MyCompany\MyProject\AppBundle\Repository\FraudeRecordRepository")
	* */
   	class FraudeRecord
	{	
		// MDA Generated variables (used for internal entity management)
		private $error = '';
		public $validEvolBrut = true;
		public $validEvolMaxEvt = true;
		public $validEvolMinEvt = true;
		public $validEvolNbEvt = true;
		public $validEvolNet = true;
		public $validMontantBrut = true;
		public $validMontantNet = true;
		public $validNombreEvt = true;
		public $validReference = true;
		public $validSaisie = true;
		public $validToString = true;
		public $validTypologie = true;
		public $validValMaxEvt = true;
		public $validValMinEvt = true;

		/**
     	* @var bigint $id
     	*
     	* @ORM\Column(name="id", type="bigint", nullable=false)
     	* @ORM\Id
     	* @ORM\GeneratedValue(strategy="IDENTITY")
     	*/
    	private $id;
		/**
     	* @var decimal $evolBrut
     	*
     	* @ORM\Column(name="evolBrut", type="decimal",precision=2 ,nullable=true)
     	*/
    	private $evolBrut;
		/**
     	* @var decimal $evolMaxEvt
     	*
     	* @ORM\Column(name="evolMaxEvt", type="decimal",precision=2 ,nullable=true)
     	*/
    	private $evolMaxEvt;
		/**
     	* @var decimal $evolMinEvt
     	*
     	* @ORM\Column(name="evolMinEvt", type="decimal",precision=2 ,nullable=true)
     	*/
    	private $evolMinEvt;
		/**
     	* @var decimal $evolNbEvt
     	*
     	* @ORM\Column(name="evolNbEvt", type="decimal",precision=2 ,nullable=true)
     	*/
    	private $evolNbEvt;
		/**
     	* @var decimal $evolNet
     	*
     	* @ORM\Column(name="evolNet", type="decimal",precision=2 ,nullable=true)
     	*/
    	private $evolNet;
		/**
     	* @var decimal $montantBrut
     	*
     	* @ORM\Column(name="montantBrut", type="decimal",precision=2 ,nullable=false)
     	*/
    	private $montantBrut =  0;
		/**
     	* @var decimal $montantNet
     	*
     	* @ORM\Column(name="montantNet", type="decimal",precision=2 ,nullable=false)
     	*/
    	private $montantNet =  0;
		/**
     	* @var integer $nombreEvt
     	*
     	* @ORM\Column(name="nombreEvt", type="integer" ,nullable=false)
     	*/
    	private $nombreEvt =  0;
		/**
     	* @var Reference
     	* @ORM\ManyToOne(targetEntity="FraudeRecord")
     	* @ORM\JoinColumns({
     	* @ORM\JoinColumn(name="reference_id", referencedColumnName="id", unique=true)
     	* })
		*/
		private $reference;		
		/**
     	* @var Saisie
		*
     	* @ORM\ManyToOne(targetEntity="FraudeSaisie", inversedBy="fraude")
     	* @ORM\JoinColumns({
     	* @ORM\JoinColumn(name="saisie_id", referencedColumnName="id", unique=true)
     	* })
		*/
		private $saisie;		
		/**
     	* @var Typologie
     	* @ORM\ManyToOne(targetEntity="FraudeTypologie")
     	* @ORM\JoinColumns({
     	* @ORM\JoinColumn(name="typologie_id", referencedColumnName="id", unique=true)
     	* })
		*/
		private $typologie;		
		/**
     	* @var decimal $valMaxEvt
     	*
     	* @ORM\Column(name="valMaxEvt", type="decimal",precision=2 ,nullable=false)
     	*/
    	private $valMaxEvt =  0;
		/**
     	* @var decimal $valMinEvt
     	*
     	* @ORM\Column(name="valMinEvt", type="decimal",precision=2 ,nullable=false)
     	*/
    	private $valMinEvt =  0;
		public function __construct()
    	{
		}
	
		/**
     	* Get id
     	*
     	* @return bigint 
     	*/
    	public function getId()
    	{
        	return $this->id;
    	}
    	public function setId($id)
    	{
        	$this->id = $id;
    	}
		/**
     	* Get Name 
		* by Id (automatic get generated by Symfony
     	*        when form display choice list)
     	* @return string
     	*/		
		public function __toString() {
			$string = "FR". $this->getSaisie()->getId()  . "-Type" . $this->getTypologie()->getId();
			if(isset($string)) return $string;			
		}
		/**
     	* Get saisie
     	*
     	* @return MyCompany\MyProject\AppBundle\Entity\FraudeSaisie 
     	*/
     	public function getSaisie() {
       		return $this->saisie;
     	}
		/**
     	* Get evolNbEvt
     	*
     	* @return decimal 
     	*/
     	public function getEvolNbEvt() {
			
			if(!$this->reference) $this->evolNbEvt = 0;
			else {
				$valeur = $this->nombreEvt;
				$reference = $this->reference->getNombreEvt();
				if($reference>0 and $valeur>0) $this->evolNbEvt = ($valeur-$reference)/$reference; 
					else $this->evolNbEvt =0;
			}	
       		return $this->evolNbEvt;
     	}
		/**
     	* Get montantBrut
     	*
     	* @return decimal 
     	*/
     	public function getMontantBrut() {
			
       		return $this->montantBrut;
     	}
		/**
     	* Get evolMaxEvt
     	*
     	* @return decimal 
     	*/
     	public function getEvolMaxEvt() {
			
			if(!$this->reference) $this->evolMaxEvt = 0;
			else {
				$valeur = $this->valMaxEvt;
				$reference = $this->reference->getValMaxEvt();
				if($reference>0 and $valeur>0) $this->evolMaxEvt = ($valeur-$reference)/$reference; 
					else $this->evolMaxEvt =0;
			}	
       		return $this->evolMaxEvt;
     	}
		/**
     	* Get valMaxEvt
     	*
     	* @return decimal 
     	*/
     	public function getValMaxEvt() {
			
       		return $this->valMaxEvt;
     	}
		/**
     	* Get evolNet
     	*
     	* @return decimal 
     	*/
     	public function getEvolNet() {
			
			if(!$this->reference) $this->evolNet = 0;
			else {
				$valeur = $this->montantNet;
				$reference = $this->reference->getMontantNet();
				if($reference>0 and $valeur>0) $this->evolNet = ($valeur-$reference)/$reference; 
					else $this->evolNet =0;
			}	
       		return $this->evolNet;
     	}
		/**
     	* Get valMinEvt
     	*
     	* @return decimal 
     	*/
     	public function getValMinEvt() {
			
       		return $this->valMinEvt;
     	}
		/**
     	* Get typologie
     	*
     	* @return MyCompany\MyProject\AppBundle\Entity\FraudeTypologie 
     	*/
     	public function getTypologie() {
       		return $this->typologie;
     	}
		/**
     	* Get nombreEvt
     	*
     	* @return integer 
     	*/
     	public function getNombreEvt() {
			
       		return $this->nombreEvt;
     	}
		/**
     	* Get evolBrut
     	*
     	* @return decimal 
     	*/
     	public function getEvolBrut() {
			
			if(!$this->reference) $this->evolBrut = 0;
			else {
				$valeur = $this->montantBrut;
				$reference = $this->reference->getMontantBrut();
				if($reference>0 and $valeur>0) $this->evolBrut = ($valeur-$reference)/$reference; 
					else $this->evolBrut =0;
			}
       		return $this->evolBrut;
     	}
		/**
     	* Get evolMinEvt
     	*
     	* @return decimal 
     	*/
     	public function getEvolMinEvt() {
			
			if(!$this->reference) $this->evolMinEvt = 0;
			else {
				$valeur = $this->valMinEvt;
				$reference = $this->reference->getValMinEvt();
				if($reference>0 and $valeur>0) $this->evolMinEvt = ($valeur-$reference)/$reference; 
					else $this->evolMinEvt =0;
			}	
       		return $this->evolMinEvt;
     	}
		/**
     	* Get montantNet
     	*
     	* @return decimal 
     	*/
     	public function getMontantNet() {
			
       		return $this->montantNet;
     	}
		/**
     	* Get reference
     	*
     	* @return MyCompany\MyProject\AppBundle\Entity\FraudeRecord 
     	*/
     	public function getReference() {
       		return $this->reference;
     	}
		/**
     	* Set evolBrut
     	*
     	* @param decimal $evolBrut
     	*/ 
     	public function setEvolBrut($evolBrut) {
  	 	}
		/**
     	* Set evolMaxEvt
     	*
     	* @param decimal $evolMaxEvt
     	*/ 
     	public function setEvolMaxEvt($evolMaxEvt) {
  	 	}
		/**
     	* Set evolMinEvt
     	*
     	* @param decimal $evolMinEvt
     	*/ 
     	public function setEvolMinEvt($evolMinEvt) {
  	 	}
		/**
     	* Set evolNbEvt
     	*
     	* @param decimal $evolNbEvt
     	*/ 
     	public function setEvolNbEvt($evolNbEvt) {
  	 	}
		/**
     	* Set evolNet
     	*
     	* @param decimal $evolNet
     	*/ 
     	public function setEvolNet($evolNet) {
  	 	}
		/**
     	* Set montantBrut
     	*
     	* @param decimal $montantBrut
     	*/ 
     	public function setMontantBrut($montantBrut) {
			
			$this->montantBrut=$montantBrut;  
  	 	}	
		/**
     	* Set montantNet
     	*
     	* @param decimal $montantNet
     	*/ 
     	public function setMontantNet($montantNet) {
			
			$this->montantNet=$montantNet;  
  	 	}	
		/**
     	* Set nombreEvt
     	*
     	* @param integer $nombreEvt
     	*/ 
     	public function setNombreEvt($nombreEvt) {
			
			$this->nombreEvt=$nombreEvt;  
  	 	}	
		/**
     	* Set reference
     	*
     	* @param MyCompany\MyProject\AppBundle\Entity\FraudeRecord $reference
     	*/ 
     	public function setReference(\MyCompany\MyProject\AppBundle\Entity\FraudeRecord $reference) {
       		$this->reference=$reference;  
  	 	}
		/**
     	* Set saisie
     	*
     	* @param MyCompany\MyProject\AppBundle\Entity\FraudeSaisie $saisie
     	*/ 
     	public function setSaisie(\MyCompany\MyProject\AppBundle\Entity\FraudeSaisie $saisie) {
       		$this->saisie=$saisie;  
  	 	}
		/**
     	* Set typologie
     	*
     	* @param MyCompany\MyProject\AppBundle\Entity\FraudeTypologie $typologie
     	*/ 
     	public function setTypologie(\MyCompany\MyProject\AppBundle\Entity\FraudeTypologie $typologie) {
       		$this->typologie=$typologie;  
  	 	}
		/**
     	* Set valMaxEvt
     	*
     	* @param decimal $valMaxEvt
     	*/ 
     	public function setValMaxEvt($valMaxEvt) {
			
			$this->valMaxEvt=$valMaxEvt;  
  	 	}	
		/**
     	* Set valMinEvt
     	*
     	* @param decimal $valMinEvt
     	*/ 
     	public function setValMinEvt($valMinEvt) {
			
			$this->valMinEvt=$valMinEvt;  
  	 	}	
		// Object validation function (see Resources/config/validation.yml)
		public function isEvolBrutValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validEvolBrut = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if(abs($this->getEvolBrut())>$this->getTypologie()->getThreshold()) $rc = false;
			
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validEvolBrut = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isEvolMaxEvtValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validEvolMaxEvt = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if(abs($this->getEvolMaxEvt())>$this->getTypologie()->getThreshold()) $rc = false;
			
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validEvolMaxEvt = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isEvolMinEvtValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validEvolMinEvt = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if(abs($this->getEvolMinEvt())>$this->getTypologie()->getThreshold()) $rc = false;
			
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validEvolMinEvt = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isEvolNbEvtValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validEvolNbEvt = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if(abs($this->getEvolNbEvt())>$this->getTypologie()->getThreshold()) $rc = false;
			
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validEvolNbEvt = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isEvolNetValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validEvolNet = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if(abs($this->getEvolNet())>$this->getTypologie()->getThreshold()) $rc = false;
			
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validEvolNet = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isMontantBrutValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validMontantBrut = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if(($this->saisie->getFraude()->get(1)->getMontantBrut()>0
				or $this->saisie->getFraude()->get(2)->getMontantBrut()>0)
				and $this->saisie->getFraude()->get(3)->getMontantBrut()>0) {
				$rc=false;				
				$errorMgr = $this->saisie; 
				$errorMsg = $this->saisie->getFraude()->get(3)->getTypologie()->getName();
			}
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validMontantBrut = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isMontantNetValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validMontantNet = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if($this->validMontantBrut) {
				if($this->montantNet>$this->montantBrut) $rc = false;
				if($this->montantNet==0 & $this->montantBrut<>0) $rc = false;
			}
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validMontantNet = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isNombreEvtValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validNombreEvt = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			if($errorMgr->getError()=='')	
			if($this->validMontantBrut and $this->validValMaxEvt and $this->validValMinEvt) {
				if($this->nombreEvt==0 and $this->montantBrut<>0) $rc = false;
				if($this->nombreEvt==1 and $this->valMaxEvt<$this->montantBrut) $rc = false;	
				if($this->nombreEvt==2 and $this->valMinEvt<>$this->valMaxEvt
					and ($this->valMaxEvt+$this->valMinEvt)<$this->montantBrut) $rc = false;								if(($this->nombreEvt*$this->valMinEvt)>$this->montantBrut) $rc = false;
				if(((($this->nombreEvt-1)*$this->valMinEvt)+$this->valMaxEvt)>$this->montantBrut
					and $this->valMaxEvt<>$this->valMinEvt and $this->nombreEvt<>2) $rc = false;
				if(($this->nombreEvt*$this->valMaxEvt)<$this->montantBrut
					and $this->valMaxEvt<>$this->valMinEvt and $this->nombreEvt<>2) $rc = false;
			}
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validNombreEvt = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isReferenceValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validReference = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validReference = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isSaisieValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validSaisie = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validSaisie = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isToStringValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validToString = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validToString = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isTypologieValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validTypologie = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validTypologie = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isValMaxEvtValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validValMaxEvt = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if($this->validMontantNet) {
				if($this->valMaxEvt==0 and $this->montantBrut<>0) $rc = false;
				if($this->valMaxEvt>$this->montantBrut) $rc = false;
			}
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validValMaxEvt = false;
				return $rc;
			}
		}
		// Object validation function (see Resources/config/validation.yml)
		public function isValMinEvtValid() {
			$rc = true; $errorMgr = $this; $errorMsg = ''; 
			$this->validValMinEvt = true;
			/*==============START OF VALIDATION RULE====================*/ 
			
			if($this->validValMaxEvt) {
				if($this->valMinEvt==0 and $this->montantBrut<>0) $rc = false;
				if($this->valMinEvt>$this->valMaxEvt) $rc = false;
			}
			$errorMgr = $this->saisie; $errorMsg = $this->typologie->getName();
			
			/*==============END OF VALIDATION RULE======================*/
			if(!$rc) {
				$errorMgr->setError($errorMsg);
				$this->validValMinEvt = false;
				return $rc;
			}
		}
		public function setError($error) {
			$this->error = $error;
		}
		public function getError() {
			return $this->error;
		}
   }
?>
